from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
from llama_cpp import Llama 
import os
import re
import pandas as pd

app = Flask(__name__)
CORS(app)  # Active le support CORS, au cas o√π

# üî• Chargement du mod√®le Llama
llm = Llama(model_path="mistral-7b-instruct-v0.1.Q4_K_M.gguf", n_ctx=2048)
print("Mod√®le charg√© avec succ√®s !")

# üìå Fonction pour extraire l'ann√©e d'un nom de fichier
def extract_year_from_filename(filename):
    match = re.search(r"(20\d{2})", filename)
    return int(match.group(1)) if match else None

# üìå Dossier contenant les fichiers CSV
data_folder = "data"

def search_f1_data(question):
    question = question.lower()
    files_to_return = []  # Liste des fichiers CSV √† retourner

    # V√©rifier s'il y a une ann√©e sp√©cifique dans la question
    match = re.search(r"(20\d{2})", question)
    year = int(match.group(1)) if match else None

    # V√©rifier si l'utilisateur demande les 5 derni√®res ann√©es
    if any(keyword in question for keyword in ["5 derni√®res ann√©es", "derni√®res ann√©es", "cinq ans", "l'ann√©e prochaine"]):
        if year:
            start_year = max(2020, year - 4)  # Ne pas descendre sous 2020
        else:
            start_year = 2020
        years = list(range(start_year, start_year + 5))
        print("5 derni√®res ann√©es:", years)
    else:
        years = [year] if year else []
        print("Ann√©e:", years)

    # Identifier les fichiers √† r√©cup√©rer selon la question
    if any(x in question for x in ["classement", "champion", "pilote"]):
        print("Traitement du classement")
        files_to_return = [f"classement/classement_f1_{y}.csv" for y in years]
    elif any(x in question for x in ["calendrier", "date"]):
        files_to_return = [f"calendrier/calendrier_f1_{y}.csv" for y in years]
    elif "circuit" in question:
        files_to_return = [f"circuits/circuits_f1_{y}.csv" for y in years]
    elif "constructeur" in question:
        files_to_return = [f"constructeurs/constructeurs_f1_{y}.csv" for y in years]

    # Charger et concat√©ner les fichiers trouv√©s
    data_results = []
    for file_key in files_to_return:
        file_path = os.path.join(data_folder, file_key)
        print("Fichier:", file_path)
        if os.path.exists(file_path):
            df = pd.read_csv(file_path)
            data_results.append(f"üìÇ **Donn√©es de {file_key}**\n{df.to_string(index=False)}\n\n")
    if data_results:
        return "\n".join(data_results)
    return "D√©sol√©, je n'ai pas trouv√© de donn√©es correspondantes."

def generate_response(question, data_results):
    # Limiter la taille des donn√©es envoy√©es au mod√®le
    if len(data_results) > 1500:
        data_results = data_results[:1500]
    
    prompt = f"""
    [INST] 
    Tu es un expert en Formule 1. Un utilisateur te pose la question :
    "{question}"
    
    Voici les donn√©es brutes extraites des fichiers CSV :
    {data_results}
    
    Analyse les donn√©es et donne une r√©ponse claire et concise.
    [/INST]
    """

    response_text = ""
    # Utiliser le mode stream pour r√©cup√©rer progressivement la r√©ponse
    for chunk in llm(prompt, max_tokens=256, stream=True):
         response_text += chunk["choices"][0]["text"]
    return response_text

# Route pour servir la page HTML
@app.route('/')
def index():
    return render_template('index.html')

# Route pour traiter la question et renvoyer la r√©ponse (en JSON)
@app.route('/ask', methods=['POST'])
def ask():
    data = request.get_json()
    question = data.get("question", "")
    data_results = search_f1_data(question)
    answer = generate_response(question, data_results)
    return jsonify({"answer": answer})

if __name__ == '__main__':
    app.run(debug=True)
